#!/bin/sh

phi() {
    >&2 printf "\033[33;1m-> \033[35;1m%s | %s\033[m %s\n" "$1" "$2" "$3"
}

usage() {
    >&2 echo "\$ cpm [i|r|l|u|U|s|S|c|h] [pkg]..."
    phi i "install" "install one or more packages"
    phi r "remove " "remove one or more packages"
    phi l "list   " "list installed packages"
    phi C "count  " "count installed packages"
    phi u "update " "update package lists"
    phi U "upgrade" "upgrade all packages"
    phi s "search " "search for a package"
    phi S "show   " "show information about a package"
    phi I "info   " "same as show"
    phi c "clean  " "clean up leftover files/caches/orphans"
    phi h "help   " "show this message"
}

pem() {
    >&2 printf "\033[31;1merror:\033[m %s\n" "$1"
}

if [ $# -ge 1 ]; then
    OP="$1"
    shift
    case "$OP" in
        i|install)
            if [ $# -lt 1 ]; then
                pem "$OP: no package(s) specified"
                exit 1
            fi
            OP='install'
            ;;
        r|remove)
            if [ $# -lt 1 ]; then
                pem "$OP: no package(s) specified"
                exit 1
            fi
            OP='remove'
            ;;
        l|list)
            OP='list'
            ;;
        C|count)
            OP='count'
            ;;
        u|update)
            OP='update'
            ;;
        U|upgrade)
            OP='upgrade'
            ;;
        s|search)
            if [ $# -lt 1 ]; then
                pem "$OP: please specify a package"
                exit 1
            elif [ $# -gt 1 ]; then
                pem "$OP: only one package may be queried at a time"
                exit 1
            fi
            OP='search'
            ;;
        S|show)
            if [ $# -lt 1 ]; then
                pem echo "$OP: please specify a package"
                exit 1
            elif [ $# -gt 1 ]; then
                pem "$OP: only one argument is allowed"
                exit 1
            fi
            OP='show'
            ;;
        c|clean)
            OP='clean'
            ;;
        h|help)
            usage
            exit 0
            ;;
        *)
            pem "Unrecognized operation: $OP"
            usage
            exit 1
            ;;
    esac
else
    usage
    exit 0
fi

# pipe to this to get a count instead of relying on wc -l
tot() {
    i=0
    while read -r line; do
        i=$((i + 1))
    done
    echo $i
}

# replacement for command -v which ignores aliases
# this is useful for me, don't ask why
has() {
    case "$(command -v $1 2>/dev/null)" in
        alias*|"") return 1
    esac
}

_apt() {
    case "$OP" in
        install) apt install $@;;
        remove) apt remove $@;;
        list) apt list --installed;;
        count) dpkg-query -f '.\n' -W | tot;;
        update) apt update;;
        upgrade) apt dist-upgrade;;
        search) apt search "$1";;
        show) apt show "$1";;
        clean) apt autoremove;;
    esac
}

_dnf() {
    case "$OP" in
        install) dnf install $@;;
        remove) dnf remove $@;;
        list) dnf list --installed;;
        count) rpm -qa | tot;;
        update) dnf check-update;;
        upgrade) dnf distro-sync;;
        search) dnf search "$1";;
        show) dnf info "$1";;
        clean) dnf autoremove;;
    esac
}

_pacman() {
    case "$OP" in
        install) pacman -S $@;;
        remove) pacman -Rsu $@;;
        list) pacman -Q;;
        count) pacman -Qg --color never | tot;;
        update) pacman -Sy;;
        upgrade) pacman -Syu;;
        search) pacman -Ss $1;;
        show) pacman -Si $1;;
        clean) pacman -Rns $(pacman -Qtdq) && pacman -Sc;;
    esac
}

_macports() {
    case "$OP" in
        install) port install -c $@;;
        remove) port uninstall --follow-dependencies $@;;
        list) port installed;;
        count) port installed | tot;;
        update) port sync;;
        upgrade) port selfupdate;;
        search) port search $1;;
        show) port info $1;;
        clean) port reclaim;;
    esac
}

_xbps() {
    case "$OP" in
        install) xbps-install $@;;
        remove) xbps-remove -R $@;;
        list) xbps-query -l;;
        count) xbps-query -l | tot;;
        update) xbps-install -S;;
        upgrade) xbps-install -Su && xbps-install -Su;;
        search) xbps-query -s "$1" --repository;;
        show) xbps-query -S "$1" --repository;;
        clean) xbps-remove -ROo;;
    esac
}

if has apt; then
    # debian/ubuntu
    _apt
elif has dnf; then
    # fedora
    _dnf
elif has pacman-key; then
    # arch/manjaro
    _pacman
elif has port; then
    # macos
    _macports
elif has xbps-install; then
    # void
    _xbps
elif has brew; then
    pem "Homebrew is not supported [wontfix]"
    exit 1
else
    pem "No valid package manager detected."
    exit 1
fi
